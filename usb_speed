#!/bin/sh
#set -x

# USB port speed setting is found in the kernel debugfs file: /sys/kernel/debug/f72c0000.usb/config
# This file is automounted by the kernel and usable by normal system users.
# This file may contain either 0 or 1.
# The value 0 indicates the USB ports operate in high speed mode.
# The value 1 indicates the USB ports operate in full speed mode.
SPEED_HIGH="0"
SPEED_FULL="1"
CONFIG_FILE="/sys/kernel/debug/f72c0000.usb/config"

# Variable for action to perform.
# Constants for consistency and ease of debugging.
CONST_ACTION_HELP="help"
CONST_ACTION_QUERY="query"
CONST_ACTION_SET="set"
action=$CONST_ACTION_HELP

# Variable for speed to set.
# Constants for consistency and ease of debugging.
CONST_SPEED_HIGH="high"
CONST_SPEED_FULL="full"
speed=""

# Variable to hold filename used to execute this script.
# Strip any path from $0, leaving only the file name.
cmd=$(basename "$0")
CONST_ALT_COMMAND="get_usb_speed"

# Function to display an error message on stderr.
err_msg() {
	echo "$1" >&2
	return 1
}

# Low level function used to write to debugfs file to set the speed at which the USB
# ports operate at.
# $1 should be either 0 (high speed), or 1 (full speed)
# Error check for debugfs file existence.
# Only intended to be used by set_usb_speed
write_usb_speed() {
	if [ -e "$CONFIG_FILE" ]; then
		echo "$1" > "$CONFIG_FILE"
	else
		err_msg "File $CONFIG_FILE not found. Unable to change USB speed."
	fi
	return $?
}

# Function to set the speed at which the USB ports operate at.
# $1 should be either 0 (high speed), or 1 (full speed)
# $1 checked for validity
# Only intended to be used by set_usb_speed
set_usb_speed() {
	case "$1" in
		"$SPEED_HIGH" | "$SPEED_FULL" )
			write_usb_speed "$1"
		;;
		* )
			err_msg "Invalid USB port speed setting ($1)."
		;;
	esac
	return $?
}

# Function to set the USB ports to operate at high speed.
set_usb_speed_high() {
	set_usb_speed $SPEED_HIGH
}

# Function to set the USB ports to operate at full speed.
set_usb_speed_full() {
	set_usb_speed $SPEED_FULL
}

# Low level function used to read debugfs file to query the speed at which the USB
# ports operate at.
# Error check for debugfs file existence.
# Only intended to be used by set_usb_speed
read_usb_speed() {
	local nRc=126
	if [ -e "$CONFIG_FILE" ]; then
		nRc=$(cat "$CONFIG_FILE")
	else
		err_msg "File $CONFIG_FILE not found. Unable to read USB speed."
	fi
	return "$nRc"
}

# Function used to display help for get_usb_speed.
#
# This file supports being called from a symlink named get_usb_speed. In
# this case the command can be called with no arguments, or with help
# arguments.
display_help_query() {
	printf "get_usb_speed\t\t\tDisplays the current USB bus speed.\n"
	printf "get_usb_speed [-h | --help]\tDisplays this help text.\n"
}

# Function used to display help for this file.
display_help() {
	printf "%s [-h | --help]\t\tDisplays this help text.\n" "$1"
	printf "%s [-q | --query]\tDisplays the current USB bus speed.\n" "$1"
	printf "%s [-s full | high]\tSets the USB bus speed to full or high speed.\n" "$1"
	printf "%s --full\t\tSets the USB bus speed to full speed.\n" "$1"
	printf "%s --high\t\tSets the USB bus speed to high speed.\n" "$1"
}

display_help_fullspeed() {
	printf "Either the micro-USB OTG port or the two type A host ports and the\n"
	printf "expansion USB host port can be used.\n"
	printf "\n"
	printf "In this mode the micro-USB OTG port, the two type A host ports and\n"
	printf "the expansion USB host port support full speed (1.5 Mbps) and low\n"
	printf "speed (400 Kbps) devices.  In particular this means that keyboards\n"
	printf "and mice will work when attached to these ports.\n"
	printf "\n"
	printf "To enable this mode plug in and then remove a micro-USB cable connected\n"
	printf "to a powered up PC, or plug in and remove a micro-USB cable with a type\n"
	printf "A receptacle.\n"
	printf "\n"
}

display_help_highspeed() {
	printf "Either the micro-USB OTG port or the two type A host ports and the\n"
	printf "expansion USB host port can be used.\n"
	printf "\n"
	printf "In this mode the micro-USB OTG port can be attached to a single high\n"
	printf "speed (480 Mbps), full speed (1.5 Mbps) or low speed (400 Kbps) device.\n"
	printf "The two type A host ports and the expansion bus host port will ONLY\n"
	printf "support high speed (480 Mbps) devices.  In particular this means that\n"
	printf "keyboards and mice will NOT work when attached to these ports.\n"
	printf "\n"
	printf "To enable this mode plug in and then remove a microUSB cable connected\n"
	printf "to a powered up PC, or plug in and remove a microUSB cable with a type\n"
	printf "A receptacle.\n"
	printf "\n"
}

# High level function used to display help based on $0
do_display_help() {
	if [ "$1" = "get_usb_speed" ]; then
		display_help_query
	else
		display_help "$1"
	fi
}

# High level function used to query the speed at which the USB ports operate at
# and display text to the user.
do_query_usb_speed() {
	read_usb_speed
	case "$?" in
		"$SPEED_HIGH" )
			echo "All USB ports configured for HIGH SPEED mode.\n"
			display_help_highspeed
		;;
		"$SPEED_FULL" )
			echo "All USB ports configured for FULL SPEED mode.\n"
			display_help_fullspeed
		;;
		126 )
		;;
		* )
			err_msg "Invalid speed setting ($?)."
		;;
	esac
	return $?
}

# High level function used to set the speed at which the USB ports operate at.
# $1 is called with value in $speed.
# 
do_set_usb_speed() {
	case "$1" in
		"$CONST_SPEED_HIGH" )
			set_usb_speed_high
		;;
		"$CONST_SPEED_FULL" )
			set_usb_speed_full
		;;
		* )
			err_msg "Invalid speed parameter ($1) specified."
		;;
	esac
	return $?
}

# --
# -- start of script
# --

# Parse command line parameters
while :
do
	case "$1" in
		--full)
			action=$CONST_ACTION_SET
			speed=$CONST_SPEED_FULL
			shift
		;;
		-h | --help)
			do_display_help "$cmd"
			exit 0
		;;
		--high)
			action=$CONST_ACTION_SET
			speed=$CONST_SPEED_HIGH
			shift
		;;
		-q | --query)
			action=$CONST_ACTION_QUERY
			do_query_usb_speed
			exit 0
		;;
		-s | --set)
			action=$CONST_ACTION_SET
			speed="$2"
			shift 2 || break
		;;
		--)
			echo "End of parameters."
			shift
			break;
		;;
		-*)
			err_msg "Error: Unknown option: $1"
			do_display_help "$cmd"
			exit 1
		;;
		*) # No more options
			break
		;;
	esac
done

# Check if we were called as get_usb_speed
# Force action to query if so.
# Script acts on -h | --help immediately when parsing command line
# arguments above.
# Behaviour of get_usb_speed when called with -h or --help depends on this.
if [ "$cmd" = "get_usb_speed" ]; then
	action=$CONST_ACTION_QUERY
	speed=""
fi

# Execute the action specified.
case "$action" in
	$CONST_ACTION_HELP)
		do_display_help "$cmd"
		exit 0
	;;
	$CONST_ACTION_QUERY)
		do_query_usb_speed
		exit $?
	;;
	$CONST_ACTION_SET)
		do_set_usb_speed "$speed"
		[ $? -eq	0 ] && do_query_usb_speed
		exit 0
	;;
esac

# If we get here, it is an error.
#err_msg "We shouldn't have gotten here."
#exit 1
